!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.10 (r5363) -  9 Sep 2014 09:53
!
!  Differentiation of pt in reverse (adjoint) mode (with options i4 dr8 r4):
!   gradient     of useful results: params pt
!   with respect to varying inputs: params
!   RW status of diff variables: params:incr pt:in-killed
SUBROUTINE PT_B(params, paramsb, ptb)
  USE COMMON_B
  IMPLICIT NONE
  REAL, INTENT(IN) :: params(3), c_hist(y), i_hist(y), y
  REAL :: paramsb(3)
  REAL :: b(y), q, r, k, p
  REAL :: bb(y), qb, rb, kb, pb
  INTEGER :: yi
  INTRINSIC EXP
  INTRINSIC SUM
  REAL :: ptb
  REAL :: pt
  REAL :: temp3
  REAL :: temp2
  REAL :: temp1
  REAL :: temp0
  REAL :: tempb2(y)
  REAL :: tempb1
  REAL :: tempb0
  REAL :: tempb
  REAL :: temp
  REAL :: temp4
  r = EXP(params(1))
  k = EXP(params(2))
  p = EXP(params(3))
  b(1) = k
  DO yi=2,y
! Note that we square B/K to force a positive number so that then
! raising to the power of p/2 exists. When B > 0 it is the same as
! (B/K)**p but still exists when B is negative. This is just an
! aid for fitting purposes.
    CALL PUSHREAL4(b(yi))
    b(yi) = b(yi-1) + r*b(yi-1)/p*(1.0-((b(yi-1)/k)**2)**(p/2)) - c_hist(yi-1)
  END DO
  q = SUM(i_hist)/SUM(b)
  temp4 = SUM(b)
  bb = 0.0
  tempb2 = 2*(q*b-i_hist)*ptb
  qb = SUM(b*tempb2)
  bb = q*tempb2 - SUM(i_hist)*qb/temp4**2
  kb = 0.0
  pb = 0.0
  rb = 0.0
  DO yi=y,2,-1
    CALL POPREAL4(b(yi))
    temp0 = r/p
    tempb = b(yi-1)*temp0*bb(yi)
    temp = b(yi-1)/k
    temp3 = temp**2
    temp2 = p/2
    IF (temp3 .LE. 0.0 .AND. (temp2 .EQ. 0.0 .OR. temp2 .NE. INT(temp2))) THEN
      tempb0 = 0.0
    ELSE
      tempb0 = -(2*temp*temp2*temp3**(temp2-1)*tempb/k)
    END IF
    temp1 = temp3**temp2
    tempb1 = b(yi-1)*(1.0-temp1)*bb(yi)/p
    bb(yi-1) = bb(yi-1) + tempb0 + ((1.0-temp1)*temp0+1.0)*bb(yi)
    kb = kb - temp*tempb0
    IF (temp3 .LE. 0.0) THEN
      pb = pb - temp0*tempb1
    ELSE
      pb = pb - temp0*tempb1 - temp1*LOG(temp3)*tempb/2
    END IF
    rb = rb + tempb1
    bb(yi) = 0.0
  END DO
  kb = kb + bb(1)
  paramsb(3) = paramsb(3) + EXP(params(3))*pb
  paramsb(2) = paramsb(2) + EXP(params(2))*kb
  paramsb(1) = paramsb(1) + EXP(params(1))*rb
END SUBROUTINE PT_B
